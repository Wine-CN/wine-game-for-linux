#!/bin/bash

### Wine packing script
### Version 1.1.6
### Author: Kron
### Email: kron4ek@gmail.com
### Link to latest version:
###		Yandex.Disk: https://yadi.sk/d/IrofgqFSqHsPu
###		Google.Drive: https://drive.google.com/open?id=1fTfJQhQSzlEkY-j3g0H6p4lwmQayUNSR
###		Github: https://github.com/Kron4ek/wine_scripts

#### Script for packing, distributing and launching Windows games
#### and programs in Linux using Wine. It works in all Linux
#### distributions which have bash shell and standard GNU utilities.

## 如果是root用户则退出

if [[ "$EUID" = 0 ]]
  then echo "请勿使用root运行程序！"
  exit
fi

## 显示帮助

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
	clear
	echo -e "可用参数：\n"
	echo -e "--debug\t\t\t使用debug模式"
	echo -e "--window\t\t\t使用wine窗口模式"
	echo -e "--help or -h\t\t\t显示帮助"
	exit
fi

### 设置变量

## 获取本脚本所在目录绝对地址

export SCRIPT="$(readlink -f "${BASH_SOURCE[0]}")"
export DIR="$(dirname "$SCRIPT")"

## WINE执行程序

WINE="$DIR/wine/bin/wine"
WINE64="$DIR/wine/bin/wine64"
WINESERVER="$DIR/wine/bin/wineserver"
REGEDIT="$DIR/wine/bin/regedit"
WINECFG="$DIR/wine/bin/winecfg"
WINETRICKS="$DIR/wine/bin/winetricks"

## WINE变量

export WINEPREFIX="$DIR/prefix"
export LD_LIBRARY_PATH="$DIR/wine/lib":$LD_LIBRARY_PATH
export WINEDEBUG="-all"
export WINEDLLOVERRIDES="winemenubuilder.exe="
if [ ! -d "$DIR/prefix/dosdevices/c:" ]; then
  cd "$DIR/prefix/dosdevices"
  ln -s ../drive_c c:
  cd "$DIR"
fi
export USER="Public"
# 如果搭载--debug参数，将启用debug模式运行游戏
if [ "$1" == "--debug" ]; then export WINEDEBUG="err+all,fixme-all"; fi

## 脚本变量

# 通用配置文件
source wine-config.ini

# 若WINDOWEDB变量为1或--window参数启用，启用wine窗口模式
if [ $WINDOWED = 1 ]; then
	export VIRTUAL_DESKTOP="explorer /desktop=Wine,$WINDOW_RES"
fi

# 获取当前桌面分辨率
if [ $FIXRES = 1 ]; then
	RESOLUTION="$(xrandr | grep \* | awk '{print $1}')"
fi

# 检查wine是否具有PBA或ESYNC特性

if grep PBA "$DIR/wine/lib/wine/wined3d.dll.so" || grep PBA "$DIR/wine/lib64/wine/wined3d.dll.so"; then
	if [ $GAMUX_WINE_PBA = 1 ];then
		echo "pba已启用"
		export PBA_DISABLE=0
	else
		export PBA_DISABLE=1
	fi
else
	export PBA_DISABLE=1
fi

if grep ESYNC "$DIR/wine/lib/wine/ntdll.dll.so" || grep ESYNC "$DIR/wine/lib64/wine/ntdll.dll.so"; then
	if [ $GAMUX_WINE_ESYNC = 1 ];then
		echo "esync已启用"
		export WINEESYNC=1
	else
		export WINEESYNC=0
	fi
else
	export WINEESYNC=0
fi

### 准备启用游戏

## 如果检测不到wine则退出

WINE_VERSION="$("$WINE" --version)"
if [ ! "$WINE_VERSION" ]; then
	echo "没有检测到具有执行权限的wine！"
	exit
fi

## 如果检测不到配置文件则退出

if [ ! "$DIR/wine-config.ini" ]; then
	echo "缺少wine-config.ini文件！"
	exit
fi

## Change working directory

## Setup prefix

## 设置windows版本

if [ "$WINVER" = "winxp" ]; then
	csdversion="Service Pack 3"
	currentbuildnumber="2600"
	currentversion="5.1"
	csdversion_hex=dword:00000300
elif [ "$WINVER" = "win2k" ]; then
	csdversion="Service Pack 4"
	currentbuildnumber="2195"
	currentversion="5.0"
	csdversion_hex=dword:00000400
elif [ "$WINVER" = "win7" ]; then
	csdversion="Service Pack 1"
	currentbuildnumber="7601"
	currentversion="6.1"
	csdversion_hex=dword:00000100

	"$WINE" reg add "HKLM\\System\\CurrentControlSet\\Control\\ProductOptions" /v ProductType /d "WinNT" /f
	"$WINE64" reg add "HKLM\\System\\CurrentControlSet\\Control\\ProductOptions" /v ProductType /d "WinNT" /f
fi

# Create registry file
echo -e "Windows Registry Editor Version 5.00\n" > "$WINEPREFIX/drive_c/setwinver.reg"
echo -e "[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion]" >> "$WINEPREFIX/drive_c/setwinver.reg"
echo -e '"CSDVersion"="'$csdversion'"' >> "$WINEPREFIX/drive_c/setwinver.reg"
echo -e '"CurrentBuildNumber"="'$currentbuildnumber'"' >> "$WINEPREFIX/drive_c/setwinver.reg"
echo -e '"CurrentVersion"="'$currentversion'"' >> "$WINEPREFIX/drive_c/setwinver.reg"

echo -e "\n[HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Windows]" >> "$WINEPREFIX/drive_c/setwinver.reg"
echo -e '"CSDVersion"='$csdversion_hex'\n' >> "$WINEPREFIX/drive_c/setwinver.reg"

# Apply and delete registry file
"$WINE" regedit C:\setwinver.reg
#rm "$WINEPREFIX/drive_c/setwinver.reg"

## 声音驱动设置为PulseAudio

if [ $USEPULSE = 1 ] && [ ! -f "$WINEPREFIX/drive_c/usepulse.reg" ]; then
	# Create registry file
	echo -e "Windows Registry Editor Version 5.00\n" > "$WINEPREFIX/drive_c/usepulse.reg"
	echo -e "[HKEY_CURRENT_USER\\Software\\Wine\\Drivers]\n" >> "$WINEPREFIX/drive_c/usepulse.reg"
	echo -e '"Audio"="pulse"' >> "$WINEPREFIX/drive_c/usepulse.reg"

	# Apply registry file
	"$WINE" regedit C:\usepulse.reg
	"$WINE64" regedit C:\usepulse.reg
	rm "$WINEPREFIX/drive_c/usealsa.reg"
elif [ $USEPULSE = 0 ] && [ ! -f "$WINEPREFIX/drive_c/usealsa.reg" ]; then
	# Create registry file
	echo -e "Windows Registry Editor Version 5.00\n" > "$WINEPREFIX/drive_c/usealsa.reg"
	echo -e "[HKEY_CURRENT_USER\\Software\\Wine\\Drivers]\n" >> "$WINEPREFIX/drive_c/usealsa.reg"
	echo -e '"Audio"="alsa"' >> "$WINEPREFIX/drive_c/usealsa.reg"

	# Apply registry file
	"$WINE" regedit C:\usealsa.reg
	"$WINE64" regedit C:\usealsa.reg
	rm "$WINEPREFIX/drive_c/usepulse.reg"
fi

## 如果需要，禁用CSMT

if [ $CSMT_DISABLE = 1 ] && [ ! -f "$WINEPREFIX/drive_c/csmt.reg" ]; then
	# Create registry file
	echo -e "Windows Registry Editor Version 5.00\n" > "$WINEPREFIX/drive_c/csmt.reg"
	echo -e "[HKEY_CURRENT_USER\Software\Wine\Direct3D]\n" >> "$WINEPREFIX/drive_c/csmt.reg"
	echo -e '"csmt"=dword:0\n' >> "$WINEPREFIX/drive_c/csmt.reg"

	# Apply registry file
	"$WINE" regedit C:\csmt.reg
	"$WINE64" regedit C:\csmt.reg
  echo "CSMT已启用"
elif [ $CSMT_DISABLE = 0 ] && [ -f "$WINEPREFIX/drive_c/csmt.reg" ]; then
	# Create registry file
	echo -e "Windows Registry Editor Version 5.00\n" > "$WINEPREFIX/drive_c/csmt.reg"
	echo -e "[HKEY_CURRENT_USER\Software\Wine\Direct3D]\n" >> "$WINEPREFIX/drive_c/csmt.reg"
	echo -e '"csmt"=-' >> "$WINEPREFIX/drive_c/csmt.reg"

	# Apply registry file
	"$WINE" regedit C:\csmt.reg
	"$WINE64" regedit C:\csmt.reg
	rm "$WINEPREFIX/drive_c/csmt.reg"
fi

## 如果需要，禁用DXVK
## Also disable nvapi library if DXVK is enabled

if [ $DXVK == 0 ]; then
  "$WINE" regedit C:\dxvk-off.reg
	export WINEDLLOVERRIDES="$WINEDLLOVERRIDES;dxgi,d3d10,d3d10_1,d3d10core,d3d11=b"
else
  "$WINE" regedit C:\dxvk-on.reg
	export DXVK_HUD=fps,devinfo,memory
fi

## Execute custom scripts


## Run the game

# Output game, vars and Wine information
echo "======================================================="
echo -e "\n游戏: $GAME\n版本: $VERSION"
echo -ne "\nWine: $WINE_VERSION"
echo -ne "\nWine架构: x$(echo $WINEARCH | tail -c 3)"

# Launch the game

"$WINE" $VIRTUAL_DESKTOP "${GAME_PATH}${EXE}" $ARGS
#$WINECFG
#$WINE regedit "C:\\Program Files\\shsd\\1.reg"
#$WINETRICKS
# Restore screen resolution
if [ $FIXRES = 1 ]; then
	"$WINESERVER" -w
	xrandr -s $RESOLUTION
fi
